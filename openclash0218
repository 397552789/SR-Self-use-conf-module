# 机场订阅，名称不能重复
proxy-providers:
  Airport_01:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "****"       #添加订阅地址
  Airport_02:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "****"          #添加订阅地址

      
# 用于下载订阅时指定UA
global-ua: clash
    
# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
ipv6: false
allow-lan: true
unified-delay: true
tcp-concurrent: true
  
# 控制面板
external-controller: 192.168.50.88:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 30

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true
  
# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com
  skip-domain:
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    
# 代理模式
tun:
  enable: true
  stack: mixed
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  
# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist 
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "*.lan"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query
    - https://dns.alidns.com/dns-query
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
   
proxies:
- name: "🟢 直连"
  type: direct
  udp: true
 
# 锚点
#pr: &pr {type: select, proxies: [ 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇸🇬 狮城节点, 🌐 全部节点, 🟢 直连]}
#p:    &a1 {type: http,     interval: 86400,  health-check: {enable: true, url: http://www.gstatic.com/generate_204, interval: 1800} }
#auto:   &a4 {type: url-test, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇸🇬 狮城节点]}
#use:  &a2 {type: select,   use: [Subscribe] }
#c:    &a6 {type: http,     behavior: classical, interval: 86400}
#d:    &a5 {type: http,     behavior: domain,    interval: 86400}
#i:    &a7 {type: http,     behavior: ipcidr,    interval: 86400}

# 策略组
proxy-groups:
  - {name: 🚀 手动切换,type: select, proxies: [♻️ 自动选择,🇭🇰 香港节点,🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点,🌐 全部节点,🟢 直连]}
  - {name: ♻️ 自动选择, type: url-test,url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,proxies: [🇭🇰 香港节点,🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点]}
  - {name: 🤖 ChatGPT,type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,proxies: [🇸🇬 狮城节点,🇯🇵 日本节点, 🇺🇲 美国节点]}
  - {name: 🍎 Apple,type: select, proxies: [🟢 直连,🇭🇰 香港节点,🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点]}
  - {name: 🎵 TikTok,type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,proxies: [🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点]}
  - {name: spotify,type: select, proxies: [🟢 直连,🇭🇰 香港节点,🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点,♻️ 自动选择]}
  - {name: netflix,type: select,proxies: [🇭🇰 香港节点,🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点]}
#  - {name: 🆎 AdBlock, type: select, proxies: [REJECT]}
  - {name: 🐟 漏网之鱼,type: select, proxies: [♻️ 自动选择,🇭🇰 香港节点,🇸🇬 狮城节点,🇯🇵 日本节点, 🇨🇳 台湾节点, 🇺🇲 美国节点,🌐 全部节点,🟢 直连]}
# 节点分组
  - {name: 🇭🇰 香港节点, type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇨🇳 台湾节点, type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,include-all: true,  filter: "台|湾|TW|(?i)Taiwan" } 
  - {name: 🇯🇵 日本节点, type: url-test,url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇸🇬 狮城节点, type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,include-all: true, filter: "(?i)新|坡|SG|(?i)Singapore"}
  - {name: 🇺🇲 美国节点, type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  - {name: 🌐 全部节点, type: url-test, url=http://www.gstatic.com/generate_204,interval: 10800, tolerance: 20,timeout: 5,include-all: true}
  #- {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  #- {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  #- {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  #- {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  #- {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  #- {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  
rules:
   - DOMAIN-KEYWORD,GoogleVoice,🇺🇲 美国节点
   - RULE-SET,ChinaIP,🟢 直连  
   - RULE-SET,Direct,🟢 直连
   - RULE-SET,Lan,🟢 直连
   - RULE-SET,Download,🟢 直连
   - GEOIP,CN,🟢 直连	
   - RULE-SET,Apple,🍎 Apple
   - RULE-SET,OpenAi,🤖 ChatGPT
   - RULE-SET,Github,♻️ 自动选择
   - RULE-SET,Google,♻️ 自动选择
  #- RULE-SET,onedrive,♻️ 自动选择
   - RULE-SET,Microsoft,♻️ 自动选择
   - RULE-SET,Tiktok,🎵 TikTok
   - RULE-SET,spotify,spotify
  #- RULE-SET,speedtest_domain,♻️ 自动选择
   - RULE-SET,Telegram,♻️ 自动选择
   - RULE-SET,netflix,♻️ 自动选择
#  - RULE-SET,Ad,🆎 AdBlock
   - RULE-SET,ProxyLite,♻️ 自动选择
   - MATCH,🐟 漏网之鱼

rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: yaml}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: yaml}
  class: &class {type: http, interval: 86400, behavior: classical, format: yaml}
rule-providers: 
  Direct:      {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Direct/Direct.yaml,                    path: ./ruleset/Direct.yaml       }
  Lan:         {!!merge <<: *class,  url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Lan/Lan.yaml,                           path: ./ruleset/Lan.yaml          }
  Download:    {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Download/Download.yaml,                  path: ./ruleset/Download.yaml     }
#  Ad:     {!!merge <<: *domain, url: https://anti-ad.net/clash.yaml,                                  path: ./ruleset/anti-ad-clash.yaml}
  Apple:      {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Apple/Apple.yaml,                   path: ./ruleset/Apple.yaml       }
  OpenAi:      {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OpenAI/OpenAI.yaml,                   path: ./ruleset/OpenAi.yaml       }
  Github:      {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml,                  path: ./ruleset/Github.yaml       }
  Google:      {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml,                    path: ./ruleset/Google.yaml       }  
  Microsoft:   {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml,                path: ./ruleset/Microsoft.yaml    }
  Tiktok:     {!!merge <<: *class, url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/TikTok/TikTok.yaml,         path: ./ruleset/Tiktok.yaml      }
  spotify:     {!!merge <<: *class, url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Spotify/Spotify.yaml,      path: ./ruleset/spotify.yaml        }
  Telegram:    {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml,                  path: ./ruleset/Telegram.yaml     }
  netflix:     {!!merge <<: *class, url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Netflix/Netflix.yaml,  path: ./ruleset/netflix.yaml        }
  ProxyLite:   {!!merge <<: *class, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/ProxyLite/ProxyLite.yaml,                path: ./ruleset/ProxyLite.yaml    }
  ChinaIP:     {!!merge <<: *ip, url: https://cdn.jsdelivr.net/gh/soffchen/GeoIP2-CN@release/clash-rule-provider.yml,                           path: ./ruleset/ChinaIP.yaml      }
  

